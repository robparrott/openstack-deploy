---
# Fire up a OpenStack instance in EC2 using RDO and packstack.
#
# Use the devstack vars file to set things
#
#  See 
#
#     http://openstack.redhat.com/Quickstart
#
# and then for quantum
#
#    https://fedoraproject.org/wiki/Packstack_to_Quantum   
#
# INSTANCES
#
# This section fires up a set of guests dynamically, 
#  registering them in the inventory under a relevant group
#


- hosts:
  - localhost
  connection: local
  gather_facts: False
  vars_files: 
  - iaas/vars/ec2-vars.yaml
  - packstack/vars/packstack-vars.yaml
          
  tasks:
  - name: Fire up a node in EC2   
    action: ec2 
        keypair=${ec2_keypair}
        id=${run_ID}
        instance_type=${ec2_type}
        image=${ec2_image}
        wait=true 
        group=${ec2_sec_group}
    register: ec2
    tags: 
      - quantum
      - images
      - wip
      
  - name: Capture the EC2 instance's contact info into the inventory
    action: add_host 
            hostname='${item.public_dns_name}' 
            ansible_ssh_host='${item.public_ip}'
            groupname=rdo
    with_items: ${ec2.instances}
    tags: 
      - quantum
      - images 
      - wip
    
# Note: the "only_if" below doesn't work, because the ec2 module always returns "changed=true"

  - name: Create volumes and attach (will fail if volumes already setup...)
    action: ec2_vol instance=${item.id} volume_size=${cinder_volume_size}
    with_items: ${ec2.instances}
    only_if: '${ec2.changed}'
    register: ec2_volumes
    ignore_errors: yes

#
# Dump data on these hosts.
#
- hosts: rdo
  vars_files: 
  - iaas/vars/ec2-vars.yaml
  - packstack/vars/packstack-vars.yaml
  user: '${remote_user}'
  sudo: False
  gather_facts: True
  tags: 
    - wip
    - quantum
    
  tasks: 
  - name: ec2 facts
    action: ec2_facts
    register: ec2_facts
    
  - name: dump everything
    local_action: template src=common/templates/dump.j2 dest=./ansible_data_dump.txt 

#******************************
#*
#*  BUILD IT
#*
#******************************
    
- hosts: rdo
  vars_files:
  - iaas/vars/ec2-vars.yaml
  - packstack/vars/packstack-vars.yaml
  user: '${remote_user}'
  sudo: True
  gather_facts: True
     
  tasks: 

  - name: ec2 facts
    action: ec2_facts
    register: ec2_facts
    tags: 
      - wip
      - quantum
              
  - name: dump everything
    action: template src=common/templates/dump.j2 dest=/tmp/ec2_data_dump.txt 
    tags: wip
                  
#---------------------------------
# Bootstrap needed packages first,
#  setup volumes etc., and 
#  let me run as sudo
#---------------------------------
      
  - name: let me run as sudo
    action: template src=packstack/templates/sudoers-remote-user 
                     dest=/etc/sudoers.d/cloud-init
                     owner=root group=root mode=0644 
  
  - name: avoid an update to cloud-init that might break access
    action:  lineinfile dest=/etc/yum.conf
                       regexp="^exclude=cloud-init" 
                       state=present 
                       create=yes
                       line="exclude=cloud-init kernel*"     
                          
  - name: upgrade lots of packages
    action: shell yum -y upgrade
                       
  - name: install some basic packages
    action: yum name=${item} state=present
    with_items:
      - git
      - which
      - bind-utils
      - tar
      - gzip
      - lvm2
      - screen
      - emacs-nox
      - telnet

  - name: setup ssh keys for root
    action: shell cd /root/.ssh && rm -f id_rsa* && ssh-keygen -f id_rsa -t rsa -N '' && cat id_rsa.pub >> authorized_keys 

    
#
# Setup a volume group from the EBS volume we mounted
#

  - name: setup a volume group for Cinder
    action: lvg pvs=/dev/${cinder_volume_dev} vg=${cinder_vg_name} state=present
    ignore_errors: yes
        
#--------------------------------------------------------------------------------------------------
# Build basic all-in-one OpenStack 
#   instance using  packstack & RDO
#--------------------------------------------------------------------------------------------------

  - name: install the RDO repos
    action: shell yum install -y ${repo_rpm}
    ignore_errors: yes
    
  - name: install packstack 
    action: yum name=openstack-packstack state=present 
    
  - name: packstack patch
    action: copy src=packstack/files/swift_common.pp 
                 dest=/usr/lib/python2.6/site-packages/packstack/puppet/templates/swift_common.pp 
                 owner=root group=root mode=644 backup=yes  
                     
#  - name: create a packstack answer file, if not already present
#    action: shell [ -f /tmp/answers.txt ] || packstack --gen-answer-file=/tmp/answers.txt
#    tags: wip

  - name: push a script to setup an answers file
    action: template src=packstack/templates/setup-answers-file.sh 
                     dest=/tmp/setup-answers-file.sh  
                     owner=${remote_user} group=${remote_user} mode=0775 
         
  - name: create the answers file  
    action: shell /tmp/setup-answers-file.sh 
                                          
  - name: run packstack 
    action: shell [ -f /tmp/packstack ] || touch /tmp/packstack && packstack --answer-file=/tmp/answers.txt   
    
  - name: setup credentials for keystone
    action: lineinfile dest=/root/.bashrc 
                       regexp="^source /root/keystonerc_admin" 
                       state=present 
                       create=yes
                       line="source /root/keystonerc_admin"
               
  - name: restart after this change
    action: service name=${item} state=restarted
    with_items:
       - openstack-nova-api
       - openstack-nova-cert
       - openstack-nova-conductor
       - openstack-nova-console
       - openstack-nova-consoleauth
       - openstack-nova-novncproxy
       - openstack-nova-scheduler
       - openstack-nova-compute
       
#  - name: bail
#    action: shell exit 1   
                   
#--------------------------------------------------------------------------------------------------
# Swap out nova-network for quantum
#--------------------------------------------------------------------------------------------------

# 1. Terminate nova networking

  - name: stop nova-network daemons
    action: service name=openstack-nova-network state=stopped
    tags: quantum
    
# 2. Install quantum service

  - name: install quantum packages 
    action: yum name=openstack-quantum state=present 
    tags: quantum
        
# 3. Install OpenvSwitch plugin

  - name: install openvswitch plugin for quantum
    action: yum name=openstack-quantum-openvswitch state=present 
    tags: quantum
        
# 4. The Quantum installation scripts make use of keystone environment variables.
#     Make sure that the administrator environment variables are set.


# 5. Configure quantum service 
#

  - name: push a script to wrap these scripts
    action: template src=packstack/templates/quantum-setup.sh 
                     dest=/tmp/quantum-setup.sh 
                     owner=${remote_user} group=${remote_user} mode=0775 
    tags: quantum
    
  - name: setup quantum using default scripts
    action: shell /tmp/quantum-setup.sh server
    tags: quantum
        
  
  - name: fix the quantum config for running sudo jobs
    action: shell openstack-config --set /etc/quantum/quantum.conf DEFAULT root_helper "sudo quantum-rootwrap /etc/quantum/rootwrap.conf"
    tags: quantum    
    
  - name: configure security groups
    action: shell openstack-config --set /etc/quantum/quantum.conf SECURITYGROUP firewall_driver quantum.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
    tags: quantum
                                  
                             
# 6.1. The above script will ask if the nova parameters need to be updated. 
#  Restart the nova compute service. The script will configure Quantum as the networking module for Nova.

  - name: restart nova-compute daemons
    action: service name=openstack-nova-compute state=restarted
    tags: quantum
         
# 6.2 Start the openvswitch service

  - name: start openvswitch daemons
    action: service name=openvswitch state=started
    tags: quantum
        
# 6.3 Create the integration bridge (for the private network)

  - name: create internal bridge
    action: shell ovs-vsctl add-br br-int
    ignore_errors: yes
    tags: quantum
        
# 6.4 Create the external bridge (for the layer 3 agent)

  - name: stop nova-network daemons
    action: shell ovs-vsctl add-br br-ex
    ignore_errors: yes
    tags: quantum
        
# 6.5 Ensure that the interfaces are persistant after reboot. This is done by creating interface files, for example for br-int:

  - name: setup interface for this internal bridge
    action: copy src=packstack/files/ifcfg-br-int 
                 dest=/etc/sysconfig/network-scripts/ifcfg-br-int
                 owner=root group=root mode=644 
    tags: quantum
    
  - name: setup interface for this external bridge
    action: copy src=packstack/files/ifcfg-br-ex
                 dest=/etc/sysconfig/network-scripts/ifcfg-br-ex
                 owner=root group=root mode=644 
    tags: quantum
                     
# 7. Start quantum service

  - name: start quantum
    action: service name=quantum-server state=restarted
    tags: quantum
    
# 7.1 Start quantum agent

  - name: start quantum agent
    action: service name=quantum-openvswitch-agent state=restarted
    tags: quantum
        
# 8. In order for the IPAM to take place one needs to invoke the DHCP agent. Use the DHCP setup tool

  - name: setup dhcp for quantum
    action: shell /tmp/quantum-setup.sh dhcp
    tags: quantum
    
# 8.1. Start DHCP agent

  - name: start quantum dhcp
    action: service name=quantum-dhcp-agent  state=restarted
    tags: quantum
        
# 9. In order to support floating IP's one need to invoke the Layer 3 agent. Use the L3 agent setup tool

  - name: setup  l3 for quantum,
    action: shell /tmp/quantum-setup.sh l3
    tags: quantum
        
#9.1. Start the L3 agent

  - name: start quantum l3
    action: service name=quantum-l3-agent state=restarted
    tags: quantum
        
# 10. Ensure that the openvswitch cleanup utility is enabled (this is used 
#  after reboot to ensure that device management of the quantum agents is not affected 
#  by the fact that the openvswitch creates the interfaces at boot)

  - name: start quantum cleanup script
    action: service name=quantum-ovs-cleanup state=started
    tags: quantum
    
# Setup some quantum services and objects

  - name: push a script for a quantum reqistration in keystone
    action: template src=packstack/templates/quantum-registration-script.sh 
                     dest=/tmp/quantum-registration-script.sh 
                     owner=${remote_user} group=${remote_user} mode=0775 
    tags: quantum
    
  - name: setup quantum registry entries
    action: shell  /tmp/quantum-registration-script.sh
    tags: quantum
        
  - name: restart quantum-relevant services
    action: service name=${item} state=restarted
    with_items:
      - openstack-nova-conductor
      - openstack-nova-api
      - openstack-keystone
      - openstack-nova-compute 
      - httpd
    tags: quantum
          
  - name: push a script to setup some basic quantum network objects for the admin user/tenant
    action: template src=packstack/templates/setup-admin-resources.sh 
                     dest=/tmp/setup-admin-resources.sh  
                     owner=${remote_user} group=${remote_user} mode=0775 
    tags: 
      - quantum      
      - wip
    
  - name: setup quantum objects for admin user
    action: shell  . /root/keystonerc_admin && /tmp/setup-admin-resources.sh 
    tags: 
      - quantum      
      - wip

  - name: last step -- see if nove compute successfully restarted, and if not get it running
    action: shell sleep 2 && /etc/init.d/openstack-nova-compute restart 
    tags: 
      - quantum      
      - wip
      

#----------------------
#
# Run a test script
#
#----------------------

  - name: push a script for creating a test setup
    action: template src=packstack/templates/test-setup.sh dest=/tmp/test-setup.sh owner=${remote_user} group=${remote_user} mode=0775 
    tags: quantum
        
  - name: run test script
    action: shell . /root/keystonerc_admin && /tmp/test-setup.sh
    tags: quantum

#------------------------
# Load some images   
#------------------------

  - name: push a script for upload VM images
    action: copy src=common/files/upload-image.sh
                 dest=/tmp/upload-image.sh
                 owner=root group=root mode=755
    tags: images
    
  - name: push some images ...
    action: shell . /root/keystonerc_admin && /tmp/upload-image.sh ${item}
    with_items:
      - http://download.cirros-cloud.net/0.3.1/cirros-0.3.1-x86_64-uec.tar.gz
      - http://download.cirros-cloud.net/0.3.1/cirros-0.3.1-x86_64-disk.img  
      - http://smoser.brickies.net/ubuntu/ttylinux-uec/ttylinux-uec-amd64-11.2_2.6.35-15_1.tar.gz         
      - http://cloud-images.ubuntu.com/quantal/current/quantal-server-cloudimg-amd64-disk1.img
      - http://mattdm.fedorapeople.org/cloud-images/Fedora18-Cloud-x86_64-latest.qcow2        
    tags: images  

#--------------------------------------------------------------------------------------------------
# Setup Ceilometer
#--------------------------------------------------------------------------------------------------

    
  #
  # Fix for ceilometer: install mondodb
  #  
#  - name: install mongodb (a fix)
#    action: yum name=mongodb-server state=present
#
#  - name: install ceilometer pkgs
#    action: yum name=${item} state=present
#    with_items:
#      - openstack-ceilometer-api
#      - openstack-ceilometer-central
#      - openstack-ceilometer-collector
#      - openstack-ceilometer-common
#      - openstack-ceilometer-compute
#      - python-ceilometer
#      - python-ceilometerclient
#      - python-ceilometerclient-doc
      
#  - name:  


#-----------------------------
# Install & Configure Heat
#-----------------------------

#  - name: install heat pkgs
#    action: yum name=${item} state=present
#    with_items:
#      - openstack-heat-api
#      - openstack-heat-api-cfn
#      - openstack-heat-api-cloudwatch
#      - openstack-heat-cli
#      - openstack-heat-common
#      - openstack-heat-engine
#      - python-heatclient
#      - python-heatclient-doc
      

#Configure the Heat database
#
# sudo heat-db-setup rpm

# Configure Keystone

# source ~/keystonerc
# wget https://raw.github.com/heat-api/heat/master/tools/heat-keystone-service
# chmod +x heat-keystone-service

# sudo -E ./heat-keystone-service


#Create a special flavor

# nova flavor-create --ephemeral 10 --swap 0 --rxtx-factor 1 m2.xlarge 7 512 0 1

#Workaround RHBZ #860282

# cd /lib/systemd/system
# for f in heat*.service; do sudo sed -i "s/^User=heat/User=openstack-heat/" $f; done

# Start Heat services

# for svc in heat-api-cfn heat-api-cloudwatch heat-engine heat-metadata; do sudo systemctl start $svc.service; done
#Download JEOS:

# wget https://github.com/downloads/heat-api/prebuilt-jeos-images/F17-x86_64-cfntools.qcow2
# Register JEOS with glance:

# sudo mv F17-x86_64-cfntools.qcow2 /var/lib/libvirt/images
# glance add name=F17-x86_64-cfntools is_public=true disk_format=qcow2 container_format=bare < /var/lib/libvirt/images/F17-x86_64-cfntools.qcow2

  